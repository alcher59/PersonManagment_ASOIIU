// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonManagment.Data.DataModel;

namespace PersonManagment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200908065624_addLoadingFilesShedule")]
    partial class addLoadingFilesShedule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonManagment.Data.AcademicDegrees", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("PersonManagment.Data.AcademicTitles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("AcademicTitles");
                });

            modelBuilder.Entity("PersonManagment.Data.Accruals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("accrued")
                        .HasColumnType("numeric");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int>("dateOfCreation")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("documentAccrualsId")
                        .HasColumnType("integer");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("responsibleId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("withheld")
                        .HasColumnType("numeric");

                    b.HasKey("id");

                    b.HasIndex("documentAccrualsId");

                    b.HasIndex("responsibleId");

                    b.ToTable("Accruals");
                });

            modelBuilder.Entity("PersonManagment.Data.AccrualsEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualsId")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("employeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("accrualsId");

                    b.HasIndex("employeeId");

                    b.ToTable("AccrualsEmployee");
                });

            modelBuilder.Entity("PersonManagment.Data.Awards", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualId")
                        .HasColumnType("integer");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int>("typeAwardId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("accrualId");

                    b.HasIndex("employeeId");

                    b.HasIndex("typeAwardId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("PersonManagment.Data.BusinessTrips", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualId")
                        .HasColumnType("integer");

                    b.Property<int>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("dateStart")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("accrualId");

                    b.ToTable("BusinessTrips");
                });

            modelBuilder.Entity("PersonManagment.Data.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RCId")
                        .HasColumnType("integer");

                    b.Property<int>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("dateStart")
                        .HasColumnType("integer");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RCId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("PersonManagment.Data.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("PersonManagment.Data.DiplomaDocument", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<int>("serial")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("DiplomaDocument");
                });

            modelBuilder.Entity("PersonManagment.Data.DisablementIncapacityReason", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("DisablementIncapacityReason");
                });

            modelBuilder.Entity("PersonManagment.Data.DocumentAccruals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("DocumentAccruals");
                });

            modelBuilder.Entity("PersonManagment.Data.DocumentPassportData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentIssued")
                        .HasColumnType("text");

                    b.Property<int>("IssuedDate")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Series")
                        .HasColumnType("integer");

                    b.Property<int>("Validity")
                        .HasColumnType("integer");

                    b.Property<int?>("personDataId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("personDataId");

                    b.ToTable("DocumentPassportData");
                });

            modelBuilder.Entity("PersonManagment.Data.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("PersonManagment.Data.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("dateEndEducation")
                        .HasColumnType("integer");

                    b.Property<int?>("dateStartEducation")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("diplomaDocumentId")
                        .HasColumnType("integer");

                    b.Property<int?>("documentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("educationalInstitutionId")
                        .HasColumnType("integer");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("inventions")
                        .HasColumnType("boolean");

                    b.Property<int?>("qualificationId")
                        .HasColumnType("integer");

                    b.Property<bool>("scientificWorks")
                        .HasColumnType("boolean");

                    b.Property<int?>("specialtyId")
                        .HasColumnType("integer");

                    b.Property<int?>("typeOfEducationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("diplomaDocumentId");

                    b.HasIndex("documentTypeId");

                    b.HasIndex("educationalInstitutionId");

                    b.HasIndex("employeeId");

                    b.HasIndex("qualificationId");

                    b.HasIndex("specialtyId");

                    b.HasIndex("typeOfEducationId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("PersonManagment.Data.EducationDegrees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("academicDegreesId")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("educationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("academicDegreesId");

                    b.HasIndex("educationId");

                    b.ToTable("EducationDegrees");
                });

            modelBuilder.Entity("PersonManagment.Data.EducationTitles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("academicTitlesId")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("educationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("academicTitlesId");

                    b.HasIndex("educationId");

                    b.ToTable("EducationTitles");
                });

            modelBuilder.Entity("PersonManagment.Data.EducationalInstitution", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("EducationalInstitution");
                });

            modelBuilder.Entity("PersonManagment.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DateOfDismissal")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("EmploymentDateTimeStamp")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonnelNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfEmploymentId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeOfEmploymentId");

                    b.HasIndex("UnitId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PersonManagment.Data.EnhancingCertification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("date")
                        .HasColumnType("integer");

                    b.Property<int>("dateDocument")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<string>("reason")
                        .HasColumnType("text");

                    b.Property<string>("solve")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("EnhancingCertification");
                });

            modelBuilder.Entity("PersonManagment.Data.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("countRates")
                        .HasColumnType("integer");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("positionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("employeeId")
                        .IsUnique();

                    b.HasIndex("positionId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("PersonManagment.Data.ExperienceWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int?>("dateStart")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("experienceId")
                        .HasColumnType("integer");

                    b.Property<int>("workPlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("experienceId");

                    b.HasIndex("workPlaceId");

                    b.ToTable("ExperienceWork");
                });

            modelBuilder.Entity("PersonManagment.Data.FOT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("compensationPayments")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("incentivePayments")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("salary")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("FOT");
                });

            modelBuilder.Entity("PersonManagment.Data.Files", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int>("date")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("PersonManagment.Data.FilesData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("data")
                        .HasColumnType("bytea");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("filesId")
                        .HasColumnType("integer");

                    b.Property<int>("size")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("filesId")
                        .IsUnique();

                    b.ToTable("FilesData");
                });

            modelBuilder.Entity("PersonManagment.Data.Indicators", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("PersonManagment.Data.MilitaryFitnessCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("MilitaryFitnessCategory");
                });

            modelBuilder.Entity("PersonManagment.Data.MilitaryProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("MilitaryProfile");
                });

            modelBuilder.Entity("PersonManagment.Data.MilitaryRank", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("MilitaryRank");
                });

            modelBuilder.Entity("PersonManagment.Data.MilitaryRegistration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("VUS")
                        .HasColumnType("text");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int>("militaryFitnessCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("militaryProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("militaryRankId")
                        .HasColumnType("integer");

                    b.Property<string>("nameOfCommissariat")
                        .HasColumnType("text");

                    b.Property<int>("stockCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("typeMilitaryRegistrationId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("employeeId")
                        .IsUnique();

                    b.HasIndex("militaryFitnessCategoryId");

                    b.HasIndex("militaryProfileId");

                    b.HasIndex("militaryRankId");

                    b.HasIndex("stockCategoryId");

                    b.HasIndex("typeMilitaryRegistrationId");

                    b.ToTable("MilitaryRegistration");
                });

            modelBuilder.Entity("PersonManagment.Data.Payroll", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualId")
                        .HasColumnType("integer");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<string>("cause")
                        .HasColumnType("text");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int>("periodDateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("periodDateStart")
                        .HasColumnType("integer");

                    b.Property<int>("typeAccrualId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("accrualId");

                    b.HasIndex("employeeId");

                    b.HasIndex("typeAccrualId");

                    b.ToTable("Payroll");
                });

            modelBuilder.Entity("PersonManagment.Data.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("InformationAddress")
                        .HasColumnType("text");

                    b.Property<string>("OutsideAddress")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationAddress")
                        .HasColumnType("text");

                    b.Property<int>("RegistrationDate")
                        .HasColumnType("integer");

                    b.Property<string>("ResidenceAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonAddress");
                });

            modelBuilder.Entity("PersonManagment.Data.PersonContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("WorkPhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("PersonManagment.Data.PersonData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Birthplace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DateBirth")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<long>("INN")
                        .HasColumnType("bigint");

                    b.Property<int>("InformationСitizenshipDateStart")
                        .HasColumnType("integer");

                    b.Property<int>("PersonAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonContactsId")
                        .HasColumnType("integer");

                    b.Property<long>("SNILS")
                        .HasColumnType("bigint");

                    b.Property<int>("ValidityDocumentDateStart")
                        .HasColumnType("integer");

                    b.Property<int?>("countDocument")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PersonAddressId")
                        .IsUnique();

                    b.HasIndex("PersonContactsId")
                        .IsUnique();

                    b.ToTable("PersonData");
                });

            modelBuilder.Entity("PersonManagment.Data.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("PersonManagment.Data.Qualification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("PersonManagment.Data.ReceptionConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("placeWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReceptionConditions");
                });

            modelBuilder.Entity("PersonManagment.Data.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("causeTransferComment")
                        .HasColumnType("text");

                    b.Property<int?>("contractId")
                        .HasColumnType("integer");

                    b.Property<int>("dateOfReceipt")
                        .HasColumnType("integer");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("isTransfer")
                        .HasColumnType("boolean");

                    b.Property<int?>("positionId")
                        .HasColumnType("integer");

                    b.Property<int?>("salaryId")
                        .HasColumnType("integer");

                    b.Property<int?>("sheduleId")
                        .HasColumnType("integer");

                    b.Property<int?>("typeOfEmploymentId")
                        .HasColumnType("integer");

                    b.Property<int?>("unitId")
                        .HasColumnType("integer");

                    b.Property<int>("vacationDays")
                        .HasColumnType("integer");

                    b.Property<int?>("vacationEntitlementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("contractId");

                    b.HasIndex("employeeId");

                    b.HasIndex("positionId");

                    b.HasIndex("salaryId");

                    b.HasIndex("sheduleId");

                    b.HasIndex("typeOfEmploymentId");

                    b.HasIndex("unitId");

                    b.HasIndex("vacationEntitlementId");

                    b.ToTable("Recruitment");
                });

            modelBuilder.Entity("PersonManagment.Data.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("salary")
                        .HasColumnType("numeric");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("PersonManagment.Data.Shedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("StaffingTableId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StaffingTableId")
                        .IsUnique();

                    b.ToTable("Shedule");
                });

            modelBuilder.Entity("PersonManagment.Data.SickLeaves", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualId")
                        .HasColumnType("integer");

                    b.Property<int>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("dateStart")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("disablementIncapacityReasonId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("accrualId");

                    b.HasIndex("disablementIncapacityReasonId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("PersonManagment.Data.Specialty", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("PersonManagment.Data.StaffingTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("FOTId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("Vacationsid")
                        .HasColumnType("integer");

                    b.Property<int?>("acceptEmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("countRates")
                        .HasColumnType("integer");

                    b.Property<int?>("dateAccept")
                        .HasColumnType("integer");

                    b.Property<int>("daysVacation")
                        .HasColumnType("integer");

                    b.Property<int?>("positionId")
                        .HasColumnType("integer");

                    b.Property<int?>("salaryId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("unitId")
                        .HasColumnType("integer");

                    b.Property<int?>("vacationEntitlementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FOTId");

                    b.HasIndex("Vacationsid");

                    b.HasIndex("acceptEmployeeId");

                    b.HasIndex("positionId");

                    b.HasIndex("salaryId");

                    b.HasIndex("unitId");

                    b.HasIndex("vacationEntitlementId");

                    b.ToTable("StaffingTable");
                });

            modelBuilder.Entity("PersonManagment.Data.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("PersonManagment.Data.StockCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("StockCategory");
                });

            modelBuilder.Entity("PersonManagment.Data.TimeSheet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IndicatorsId")
                        .HasColumnType("integer");

                    b.Property<int>("date")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int>("hours")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("IndicatorsId");

                    b.HasIndex("employeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("PersonManagment.Data.TypeAccrual", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TypeAccrual");
                });

            modelBuilder.Entity("PersonManagment.Data.TypeAward", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TypeAward");
                });

            modelBuilder.Entity("PersonManagment.Data.TypeMilitaryRegistration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TypeMilitaryRegistration");
                });

            modelBuilder.Entity("PersonManagment.Data.TypeOfEducation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("TypeOfEducation");
                });

            modelBuilder.Entity("PersonManagment.Data.TypeOfEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOfEmployment");
                });

            modelBuilder.Entity("PersonManagment.Data.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("PersonManagment.Data.VacationEntitlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VacationEntitlement");
                });

            modelBuilder.Entity("PersonManagment.Data.VacationShedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("causeTransferComment")
                        .HasColumnType("text");

                    b.Property<int>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("dateStart")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("employeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("replacementEmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("vacationEntitlementId")
                        .HasColumnType("integer");

                    b.Property<bool>("vacationTransfer")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("replacementEmployeeId");

                    b.HasIndex("vacationEntitlementId");

                    b.ToTable("VacationShedule");
                });

            modelBuilder.Entity("PersonManagment.Data.Vacations", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("accrualId")
                        .HasColumnType("integer");

                    b.Property<int>("dateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("dateStart")
                        .HasColumnType("integer");

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("vacationEntitlementId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("accrualId");

                    b.HasIndex("vacationEntitlementId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("PersonManagment.Data.WorkPlace", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("WorkPlace");
                });

            modelBuilder.Entity("PersonManagment.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PersonManagment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PersonManagment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PersonManagment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Accruals", b =>
                {
                    b.HasOne("PersonManagment.Data.DocumentAccruals", "DocumentAccruals")
                        .WithMany("Accruals")
                        .HasForeignKey("documentAccrualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Responsible")
                        .WithMany("AccrualsResponsible")
                        .HasForeignKey("responsibleId");
                });

            modelBuilder.Entity("PersonManagment.Data.AccrualsEmployee", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("AccrualsEmployee")
                        .HasForeignKey("accrualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("AccrualsEmployee")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Awards", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("Awards")
                        .HasForeignKey("accrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("Awards")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.TypeAward", "TypeAward")
                        .WithMany("Awards")
                        .HasForeignKey("typeAwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.BusinessTrips", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("BusinessTrips")
                        .HasForeignKey("accrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Contract", b =>
                {
                    b.HasOne("PersonManagment.Data.ReceptionConditions", "ReceptionConditions")
                        .WithMany("Contract")
                        .HasForeignKey("RCId");
                });

            modelBuilder.Entity("PersonManagment.Data.DocumentPassportData", b =>
                {
                    b.HasOne("PersonManagment.Data.Country", "Country")
                        .WithMany("DocumentPassportData")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.PersonData", "PersonData")
                        .WithMany("DocumentPassportData")
                        .HasForeignKey("personDataId");
                });

            modelBuilder.Entity("PersonManagment.Data.Education", b =>
                {
                    b.HasOne("PersonManagment.Data.DiplomaDocument", "DiplomaDocument")
                        .WithMany("Education")
                        .HasForeignKey("diplomaDocumentId");

                    b.HasOne("PersonManagment.Data.DocumentType", "DocumentType")
                        .WithMany("Education")
                        .HasForeignKey("documentTypeId");

                    b.HasOne("PersonManagment.Data.EducationalInstitution", "EducationalInstitution")
                        .WithMany("Education")
                        .HasForeignKey("educationalInstitutionId");

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employeeId");

                    b.HasOne("PersonManagment.Data.Qualification", "Qualification")
                        .WithMany("Education")
                        .HasForeignKey("qualificationId");

                    b.HasOne("PersonManagment.Data.Specialty", "Specialty")
                        .WithMany("Education")
                        .HasForeignKey("specialtyId");

                    b.HasOne("PersonManagment.Data.TypeOfEducation", "TypeOfEducation")
                        .WithMany("Education")
                        .HasForeignKey("typeOfEducationId");
                });

            modelBuilder.Entity("PersonManagment.Data.EducationDegrees", b =>
                {
                    b.HasOne("PersonManagment.Data.AcademicDegrees", "AcademicDegrees")
                        .WithMany("EducationDegrees")
                        .HasForeignKey("academicDegreesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Education", "Education")
                        .WithMany("EducationDegrees")
                        .HasForeignKey("educationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.EducationTitles", b =>
                {
                    b.HasOne("PersonManagment.Data.AcademicTitles", "AcademicTitles")
                        .WithMany("EducationTitles")
                        .HasForeignKey("academicTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Education", "Education")
                        .WithMany("EducationTitles")
                        .HasForeignKey("educationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Employee", b =>
                {
                    b.HasOne("PersonManagment.Data.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.TypeOfEmployment", "TypeOfEmployment")
                        .WithMany("Employee")
                        .HasForeignKey("TypeOfEmploymentId");

                    b.HasOne("PersonManagment.Data.Unit", "Unit")
                        .WithMany("Employee")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("PersonManagment.Data.EnhancingCertification", b =>
                {
                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("EnhancingCertification")
                        .HasForeignKey("employeeId");
                });

            modelBuilder.Entity("PersonManagment.Data.Experience", b =>
                {
                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithOne("Experience")
                        .HasForeignKey("PersonManagment.Data.Experience", "employeeId");

                    b.HasOne("PersonManagment.Data.Position", "Position")
                        .WithMany("Experience")
                        .HasForeignKey("positionId");
                });

            modelBuilder.Entity("PersonManagment.Data.ExperienceWork", b =>
                {
                    b.HasOne("PersonManagment.Data.Experience", "Experience")
                        .WithMany("ExperienceWork")
                        .HasForeignKey("experienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.WorkPlace", "WorkPlace")
                        .WithMany("ExperienceWork")
                        .HasForeignKey("workPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.FilesData", b =>
                {
                    b.HasOne("PersonManagment.Data.Files", "Files")
                        .WithOne("FilesData")
                        .HasForeignKey("PersonManagment.Data.FilesData", "filesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.MilitaryRegistration", b =>
                {
                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithOne("MilitaryRegistration")
                        .HasForeignKey("PersonManagment.Data.MilitaryRegistration", "employeeId");

                    b.HasOne("PersonManagment.Data.MilitaryFitnessCategory", "MilitaryFitnessCategory")
                        .WithMany("MilitaryRegistration")
                        .HasForeignKey("militaryFitnessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.MilitaryProfile", "MilitaryProfile")
                        .WithMany("MilitaryRegistration")
                        .HasForeignKey("militaryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.MilitaryRank", "MilitaryRank")
                        .WithMany("MilitaryRegistration")
                        .HasForeignKey("militaryRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.StockCategory", "StockCategory")
                        .WithMany("MilitaryRegistration")
                        .HasForeignKey("stockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.TypeMilitaryRegistration", "TypeMilitaryRegistration")
                        .WithMany("MilitaryRegistration")
                        .HasForeignKey("typeMilitaryRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Payroll", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("Payroll")
                        .HasForeignKey("accrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("Payroll")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.TypeAccrual", "TypeAccrual")
                        .WithMany("Payroll")
                        .HasForeignKey("typeAccrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.PersonData", b =>
                {
                    b.HasOne("PersonManagment.Data.DocumentType", "DocumentType")
                        .WithMany("PersonData")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.PersonAddress", "PersonAddress")
                        .WithOne("PersonData")
                        .HasForeignKey("PersonManagment.Data.PersonData", "PersonAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.PersonContacts", "PersonContacts")
                        .WithOne("PersonData")
                        .HasForeignKey("PersonManagment.Data.PersonData", "PersonContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.Recruitment", b =>
                {
                    b.HasOne("PersonManagment.Data.Contract", "Contract")
                        .WithMany("Recruitment")
                        .HasForeignKey("contractId");

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("Recruitment")
                        .HasForeignKey("employeeId");

                    b.HasOne("PersonManagment.Data.Position", "Position")
                        .WithMany("Recruitment")
                        .HasForeignKey("positionId");

                    b.HasOne("PersonManagment.Data.Salary", "Salary")
                        .WithMany("Recruitment")
                        .HasForeignKey("salaryId");

                    b.HasOne("PersonManagment.Data.Shedule", "Shedule")
                        .WithMany("Recruitment")
                        .HasForeignKey("sheduleId");

                    b.HasOne("PersonManagment.Data.TypeOfEmployment", "TypeOfEmployment")
                        .WithMany("Recruitment")
                        .HasForeignKey("typeOfEmploymentId");

                    b.HasOne("PersonManagment.Data.Unit", "Unit")
                        .WithMany("Recruitment")
                        .HasForeignKey("unitId");

                    b.HasOne("PersonManagment.Data.VacationEntitlement", "VacationEntitlement")
                        .WithMany("Recruitment")
                        .HasForeignKey("vacationEntitlementId");
                });

            modelBuilder.Entity("PersonManagment.Data.Shedule", b =>
                {
                    b.HasOne("PersonManagment.Data.StaffingTable", "StaffingTable")
                        .WithOne("Shedule")
                        .HasForeignKey("PersonManagment.Data.Shedule", "StaffingTableId");
                });

            modelBuilder.Entity("PersonManagment.Data.SickLeaves", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("SickLeaves")
                        .HasForeignKey("accrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.DisablementIncapacityReason", "DisablementIncapacityReason")
                        .WithMany("SickLeaves")
                        .HasForeignKey("disablementIncapacityReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonManagment.Data.StaffingTable", b =>
                {
                    b.HasOne("PersonManagment.Data.FOT", "FOT")
                        .WithMany("StaffingTable")
                        .HasForeignKey("FOTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Vacations", null)
                        .WithMany("StaffingTable")
                        .HasForeignKey("Vacationsid");

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("StaffingTable")
                        .HasForeignKey("acceptEmployeeId");

                    b.HasOne("PersonManagment.Data.Position", "Position")
                        .WithMany("StaffingTable")
                        .HasForeignKey("positionId");

                    b.HasOne("PersonManagment.Data.Salary", "Salary")
                        .WithMany("StaffingTable")
                        .HasForeignKey("salaryId");

                    b.HasOne("PersonManagment.Data.Unit", "Unit")
                        .WithMany("StaffingTable")
                        .HasForeignKey("unitId");

                    b.HasOne("PersonManagment.Data.VacationEntitlement", "VacationEntitlement")
                        .WithMany("StaffingTable")
                        .HasForeignKey("vacationEntitlementId");
                });

            modelBuilder.Entity("PersonManagment.Data.TimeSheet", b =>
                {
                    b.HasOne("PersonManagment.Data.Indicators", "Indicators")
                        .WithMany("TimeSheet")
                        .HasForeignKey("IndicatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employeeId");
                });

            modelBuilder.Entity("PersonManagment.Data.VacationShedule", b =>
                {
                    b.HasOne("PersonManagment.Data.Employee", "Employee")
                        .WithMany("VacationSheduleeEmployee")
                        .HasForeignKey("employeeId");

                    b.HasOne("PersonManagment.Data.Employee", "EmployeeReplacement")
                        .WithMany("VacationSheduleeReplacement")
                        .HasForeignKey("replacementEmployeeId");

                    b.HasOne("PersonManagment.Data.VacationEntitlement", "VacationEntitlement")
                        .WithMany("VacationShedule")
                        .HasForeignKey("vacationEntitlementId");
                });

            modelBuilder.Entity("PersonManagment.Data.Vacations", b =>
                {
                    b.HasOne("PersonManagment.Data.Accruals", "Accruals")
                        .WithMany("Vacations")
                        .HasForeignKey("accrualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonManagment.Data.VacationEntitlement", "VacationEntitlement")
                        .WithMany("Vacations")
                        .HasForeignKey("vacationEntitlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
